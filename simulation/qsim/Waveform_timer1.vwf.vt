// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/26/2019 01:18:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TrafficSigKL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TrafficSigKL_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TrafficSigKL_vlg_check_tst (
	outclk2,
	s_out,
	timer_out1,
	sampler_rx
);
input  outclk2;
input [1:0] s_out;
input [5:0] timer_out1;
input sampler_rx;

reg  outclk2_expected;
reg [1:0] s_out_expected;
reg [5:0] timer_out1_expected;

reg  outclk2_prev;
reg [1:0] s_out_prev;
reg [5:0] timer_out1_prev;

reg  outclk2_expected_prev;
reg [1:0] s_out_expected_prev;
reg [5:0] timer_out1_expected_prev;

reg  last_outclk2_exp;
reg [1:0] last_s_out_exp;
reg [5:0] last_timer_out1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	outclk2_prev = outclk2;
	s_out_prev = s_out;
	timer_out1_prev = timer_out1;
end

// update expected /o prevs

always @(trigger)
begin
	outclk2_expected_prev = outclk2_expected;
	s_out_expected_prev = s_out_expected;
	timer_out1_expected_prev = timer_out1_expected;
end



// expected outclk2
initial
begin
	outclk2_expected = 1'bX;
end 
// expected s_out[ 1 ]
initial
begin
	s_out_expected[1] = 1'bX;
end 
// expected s_out[ 0 ]
initial
begin
	s_out_expected[0] = 1'bX;
end 
// expected timer_out1[ 5 ]
initial
begin
	timer_out1_expected[5] = 1'bX;
end 
// expected timer_out1[ 4 ]
initial
begin
	timer_out1_expected[4] = 1'bX;
end 
// expected timer_out1[ 3 ]
initial
begin
	timer_out1_expected[3] = 1'bX;
end 
// expected timer_out1[ 2 ]
initial
begin
	timer_out1_expected[2] = 1'bX;
end 
// expected timer_out1[ 1 ]
initial
begin
	timer_out1_expected[1] = 1'bX;
end 
// expected timer_out1[ 0 ]
initial
begin
	timer_out1_expected[0] = 1'bX;
end 
// generate trigger
always @(outclk2_expected or outclk2 or s_out_expected or s_out or timer_out1_expected or timer_out1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outclk2 = %b | expected s_out = %b | expected timer_out1 = %b | ",outclk2_expected_prev,s_out_expected_prev,timer_out1_expected_prev);
	$display("| real outclk2 = %b | real s_out = %b | real timer_out1 = %b | ",outclk2_prev,s_out_prev,timer_out1_prev);
`endif
	if (
		( outclk2_expected_prev !== 1'bx ) && ( outclk2_prev !== outclk2_expected_prev )
		&& ((outclk2_expected_prev !== last_outclk2_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outclk2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outclk2_expected_prev);
		$display ("     Real value = %b", outclk2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outclk2_exp = outclk2_expected_prev;
	end
	if (
		( s_out_expected_prev[0] !== 1'bx ) && ( s_out_prev[0] !== s_out_expected_prev[0] )
		&& ((s_out_expected_prev[0] !== last_s_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_out_exp[0] = s_out_expected_prev[0];
	end
	if (
		( s_out_expected_prev[1] !== 1'bx ) && ( s_out_prev[1] !== s_out_expected_prev[1] )
		&& ((s_out_expected_prev[1] !== last_s_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_out_expected_prev);
		$display ("     Real value = %b", s_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_s_out_exp[1] = s_out_expected_prev[1];
	end
	if (
		( timer_out1_expected_prev[0] !== 1'bx ) && ( timer_out1_prev[0] !== timer_out1_expected_prev[0] )
		&& ((timer_out1_expected_prev[0] !== last_timer_out1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[0] = timer_out1_expected_prev[0];
	end
	if (
		( timer_out1_expected_prev[1] !== 1'bx ) && ( timer_out1_prev[1] !== timer_out1_expected_prev[1] )
		&& ((timer_out1_expected_prev[1] !== last_timer_out1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[1] = timer_out1_expected_prev[1];
	end
	if (
		( timer_out1_expected_prev[2] !== 1'bx ) && ( timer_out1_prev[2] !== timer_out1_expected_prev[2] )
		&& ((timer_out1_expected_prev[2] !== last_timer_out1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[2] = timer_out1_expected_prev[2];
	end
	if (
		( timer_out1_expected_prev[3] !== 1'bx ) && ( timer_out1_prev[3] !== timer_out1_expected_prev[3] )
		&& ((timer_out1_expected_prev[3] !== last_timer_out1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[3] = timer_out1_expected_prev[3];
	end
	if (
		( timer_out1_expected_prev[4] !== 1'bx ) && ( timer_out1_prev[4] !== timer_out1_expected_prev[4] )
		&& ((timer_out1_expected_prev[4] !== last_timer_out1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[4] = timer_out1_expected_prev[4];
	end
	if (
		( timer_out1_expected_prev[5] !== 1'bx ) && ( timer_out1_prev[5] !== timer_out1_expected_prev[5] )
		&& ((timer_out1_expected_prev[5] !== last_timer_out1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port timer_out1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", timer_out1_expected_prev);
		$display ("     Real value = %b", timer_out1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_timer_out1_exp[5] = timer_out1_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TrafficSigKL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire outclk2;
wire [1:0] s_out;
wire [5:0] timer_out1;

wire sampler;                             

// assign statements (if any)                          
TrafficSigKL i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.outclk2(outclk2),
	.reset(reset),
	.s_out(s_out),
	.timer_out1(timer_out1)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
end 

TrafficSigKL_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

TrafficSigKL_vlg_check_tst tb_out(
	.outclk2(outclk2),
	.s_out(s_out),
	.timer_out1(timer_out1),
	.sampler_rx(sampler)
);
endmodule

